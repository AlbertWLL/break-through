#端口号
server.port=6666
spring.devtools.restart.enabled=true
spring.devtools.restart.additional-paths=src/main/java
spring.devtools.restart.exclude=static/**,public/**

#数据源配置
#主数据源
spring.datasource.master.jdbc-url=jdbc:mysql://localhost:3306/danque?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&zeroDateTimeBehavior=CONVERT_TO_NULL
spring.datasource.master.username=root
spring.datasource.master.password=root
spring.datasource.master.driver-class-name=com.mysql.cj.jdbc.Driver

#从数据源
spring.datasource.slave.jdbc-url=jdbc:mysql://localhost:3308/danque-salve?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&zeroDateTimeBehavior=CONVERT_TO_NULL
spring.datasource.slave.username=root
spring.datasource.slave.password=salve
spring.datasource.slave.driver-class-name=com.mysql.cj.jdbc.Driver

#redis
spring.redis.host=dev-redis-master.dev.svc.sh.office
spring.redis.port=6379
spring.redis.password=CoUmJ2LL4DHNSSw1wCs6
spring.redis.timeout=3000ms
spring.redis.jedis.pool.max-active=8
spring.redis.jedis.pool.max-wait=-1s
spring.redis.jedis.pool.max-idle=8
spring.redis.jedis.pool.min-idle=0
spring.redis.database=1
#开启spring缓存为redis
spring.cache.type=redis

#RabbitMQ 服务器配置
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest@jst
spring.rabbitmq.virtual-host=/
spring.rabbitmq.publisher-confirm-type=correlated
spring.rabbitmq.publisher-returns=true
spring.rabbitmq.listener.simple.acknowledge-mode=manual
spring.rabbitmq.listener.simple.retry.enabled=true
spring.rabbitmq.listener.simple.retry.max-attempts=2

#exchange routingKey queue配置
danque.rabbitmq.test.exchange.name=danque.rabbitmq.test.exchange
danque.rabbitmq.test.routing.key=danque.rabbitmq.test.routing.key
danque.rabbitmq.test.queue.name=danque.rabbitmq.test.queue

#sharingsphere-jdbc
#模式配置:内存模式、单机模式、集群模式
#内存模式
#spring.shardingsphere.mode.type=Memory
#数据源配置
#spring.shardingsphere.datasource.names=sharding_1000,sharding_1001
#
#spring.shardingsphere.datasource.sharding_1000.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.sharding_1000.driver-class-name= com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.sharding_1000.jdbc-url= jdbc:mysql://localhost:3306/sharding_1000?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&zeroDateTimeBehavior=CONVERT_TO_NULL
#spring.shardingsphere.datasource.sharding_1000.username= root
#spring.shardingsphere.datasource.sharding_1000.password= root
#
#spring.shardingsphere.datasource.sharding_1001.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.sharding_1001.driver-class-name= com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.sharding_1001.jdbc-url= jdbc:mysql://localhost:3306/sharding_1001?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&zeroDateTimeBehavior=CONVERT_TO_NULL
#spring.shardingsphere.datasource.sharding_1001.username= root
#spring.shardingsphere.datasource.sharding_1001.password= root

# 标准分片表配置
# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。
# 缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
#spring.shardingsphere.rules.sharding.tables.tb_vehicle.actual-data-nodes=sharding_1000.tb_vehicle_${1..10}

# 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一

# 用于单分片键的标准分片场景
# 分片列名称
#spring.shardingsphere.rules.sharding.tables.tb_vehicle.database-strategy.standard.sharding-column= db_no,co_id
## 分片算法名称
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-algorithm-name=

## 用于多分片键的复合分片场景
#spring.shardingsphere.rules.sharding.tables.tb_vehicle.database-strategy.complex.sharding-columns= db_no,co_id
#spring.shardingsphere.rules.sharding.tables.tb_vehicle.database-strategy.complex.sharding-algorithm-name=
#
## 用于 Hint 的分片策略
## 分片算法名称
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.sharding-algorithm-name=
#
## 分表策略，同分库策略
#spring.shardingsphere.rules.sharding.tables.tb_vehicle.table-strategy.xxx= # 省略
#
## 自动分片表配置
#spring.shardingsphere.rules.sharding.auto-tables.tb_vehicle.actual-data-sources= # 数据源名
#
#spring.shardingsphere.rules.sharding.auto-tables.tb_vehicle.sharding-strategy.standard.sharding-column= db_no,co_id
#spring.shardingsphere.rules.sharding.auto-tables.tb_vehicle.sharding-strategy.standard.sharding-algorithm-name=
#
## 分布式序列策略配置
#spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # 分布式序列列名称
#spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # 分布式序列算法名称
#
#spring.shardingsphere.rules.sharding.binding-tables[0]= # 绑定表规则列表
#spring.shardingsphere.rules.sharding.binding-tables[1]= # 绑定表规则列表
#spring.shardingsphere.rules.sharding.binding-tables[x]= # 绑定表规则列表
#
#spring.shardingsphere.rules.sharding.broadcast-tables[0]= # 广播表规则列表
#spring.shardingsphere.rules.sharding.broadcast-tables[1]= # 广播表规则列表
#spring.shardingsphere.rules.sharding.broadcast-tables[x]= # 广播表规则列表
#
#spring.shardingsphere.sharding.default-database-strategy.xxx= # 默认数据库分片策略
#spring.shardingsphere.sharding.default-table-strategy.xxx= # 默认表分片策略
#spring.shardingsphere.sharding.default-key-generate-strategy.xxx= # 默认分布式序列策略
#spring.shardingsphere.sharding.default-sharding-column= # 默认分片列名称
#
## 分片算法配置
#spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # 分片算法类型
#spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx= # 分片算法属性配置
#
## 分布式序列算法配置
#spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # 分布式序列算法类型
#spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法属性配置


